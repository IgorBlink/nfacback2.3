#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Voice-to-Voice –ò–ò –ê–≥–µ–Ω—Ç–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º Python 3.12+
"""

import sys
import subprocess
import platform
import os

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    return True

def install_base_tools():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    commands = [
        "pip install --upgrade pip",
        "pip install --upgrade setuptools>=68.0.0",
        "pip install --upgrade wheel>=0.40.0"
    ]
    
    for cmd in commands:
        print(f"  –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        success, stdout, stderr = run_command(cmd)
        if not success:
            print(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {cmd} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            print(f"     {stderr}")
    
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def install_main_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
    safe_packages = [
        "fastapi==0.104.1",
        "uvicorn==0.24.0", 
        "websockets==12.0",
        "google-generativeai==0.3.2",
        "speechrecognition==3.10.0",
        "pydub==0.25.1",
        "gtts==2.4.0",
        "numpy==1.24.3",
        "python-multipart==0.0.6",
        "jinja2==3.1.2",
        "aiofiles==23.2.1",
        "python-socketio==5.10.0"
    ]
    
    for package in safe_packages:
        print(f"  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: {package}")
        success, stdout, stderr = run_command(f"pip install {package}")
        if not success:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {stderr}")
            return False
    
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def install_problematic_packages():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏"""
    print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webrtcvad
    print("  –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webrtcvad...")
    success, stdout, stderr = run_command("pip install webrtcvad==2.0.10")
    if not success:
        print("  ‚ùå webrtcvad –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        print("     VAD –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    else:
        print("  ‚úÖ webrtcvad —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pyaudio
    print("  –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyAudio...")
    
    system = platform.system().lower()
    if system == "darwin":  # macOS
        print("    –°–∏—Å—Ç–µ–º–∞: macOS")
        print("    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: brew install portaudio")
        run_command("brew install portaudio")
    elif system == "linux":  # Linux
        print("    –°–∏—Å—Ç–µ–º–∞: Linux")
        print("    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: sudo apt-get install portaudio19-dev")
    
    success, stdout, stderr = run_command("pip install pyaudio==0.2.11")
    if not success:
        print("  ‚ùå PyAudio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("     –ú–∏–∫—Ä–æ—Ñ–æ–Ω –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("     –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    else:
        print("  ‚úÖ PyAudio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...")
    
    if not os.path.exists(".env"):
        if os.path.exists("env_example.txt"):
            run_command("cp env_example.txt .env")
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
            print("üîë –ù–ï –ó–ê–ë–£–î–¨–¢–ï –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à GEMINI_API_KEY –≤ —Ñ–∞–π–ª .env!")
        else:
            with open(".env", "w") as f:
                f.write("GEMINI_API_KEY=your_gemini_api_key_here\n")
                f.write("HOST=0.0.0.0\n")
                f.write("PORT=8000\n")
                f.write("DEBUG=True\n")
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
            print("üîë –ù–ï –ó–ê–ë–£–î–¨–¢–ï –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à GEMINI_API_KEY –≤ —Ñ–∞–π–ª .env!")
    else:
        print("‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Voice-to-Voice –ò–ò –ê–≥–µ–Ω—Ç–∞")
    print("=" * 50)
    
    if not check_python_version():
        sys.exit(1)
    
    install_base_tools()
    
    if not install_main_dependencies():
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)
    
    install_problematic_packages()
    create_env_file()
    
    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á Gemini: https://aistudio.google.com/app/apikey")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª .env: GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start.py")
    print("\nüí° –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–º–æ—Ç—Ä–∏—Ç–µ README.md")

if __name__ == "__main__":
    main() 